/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dex.order.api;

import com.dex.order.model.Order;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-01-26T21:59:43.122248+05:30[Asia/Kolkata]")
@Validated
@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    default OrdersApiDelegate getDelegate() {
        return new OrdersApiDelegate() {};
    }

    /**
     * POST /orders : Create a new Order
     *
     * @param order  (optional)
     * @return Order Response (status code 200)
     *         or unable to process the action (status code 400)
     */
    @ApiOperation(value = "Create a new Order", nickname = "createOrder", notes = "", response = Order.class, tags={ "orders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order Response", response = Order.class),
        @ApiResponse(code = 400, message = "unable to process the action") })
    @PostMapping(
        value = "/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Order> createOrder(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Order order) throws Exception {
        return getDelegate().createOrder(order);
    }


    /**
     * GET /orders/{id} : retrieve an order
     *
     * @param id Order ID (required)
     * @return Order Response (status code 200)
     *         or bad input parameter (status code 400)
     */
    @ApiOperation(value = "retrieve an order", nickname = "getOrders", notes = "", response = Order.class, tags={ "orders", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order Response", response = Order.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @GetMapping(
        value = "/orders/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Order> getOrders(@ApiParam(value = "Order ID",required=true) @PathVariable("id") String id) throws Exception {
        return getDelegate().getOrders(id);
    }

}
